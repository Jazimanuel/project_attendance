// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (name, email)
VALUES ($1, $2)
RETURNING id, name, email, created_at
`

type CreateStudentParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.Name, arg.Email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getStudentByID = `-- name: GetStudentByID :one
SELECT id, name, email, created_at FROM students
WHERE id = $1
`

func (q *Queries) GetStudentByID(ctx context.Context, id int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, name, email, created_at FROM students
ORDER BY id
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
