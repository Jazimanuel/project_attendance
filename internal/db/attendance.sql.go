// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attendance.sql

package db

import (
	"context"
	"database/sql"
)

const listAttendanceByStudent = `-- name: ListAttendanceByStudent :many
SELECT id, student_id, course_id, check_in, check_out, status, aborted, created_at FROM attendance
WHERE student_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAttendanceByStudent(ctx context.Context, studentID int32) ([]Attendance, error) {
	rows, err := q.db.QueryContext(ctx, listAttendanceByStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attendance
	for rows.Next() {
		var i Attendance
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.CourseID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.Aborted,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordAttendance = `-- name: RecordAttendance :one
INSERT INTO attendance (student_id, course_id, status)
VALUES ($1, $2, $3)
RETURNING id, student_id, course_id, check_in, check_out, status, aborted, created_at
`

type RecordAttendanceParams struct {
	StudentID int32
	CourseID  int32
	Status    string
}

func (q *Queries) RecordAttendance(ctx context.Context, arg RecordAttendanceParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, recordAttendance, arg.StudentID, arg.CourseID, arg.Status)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Status,
		&i.Aborted,
		&i.CreatedAt,
	)
	return i, err
}

const updateCheckOut = `-- name: UpdateCheckOut :one
UPDATE attendance
SET check_out = $1
WHERE id = $2
RETURNING id, student_id, course_id, check_in, check_out, status, aborted, created_at
`

type UpdateCheckOutParams struct {
	CheckOut sql.NullTime
	ID       int32
}

func (q *Queries) UpdateCheckOut(ctx context.Context, arg UpdateCheckOutParams) (Attendance, error) {
	row := q.db.QueryRowContext(ctx, updateCheckOut, arg.CheckOut, arg.ID)
	var i Attendance
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Status,
		&i.Aborted,
		&i.CreatedAt,
	)
	return i, err
}
