// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (title, instructor)
VALUES ($1, $2)
RETURNING id, title, instructor, created_at
`

type CreateCourseParams struct {
	Title      string
	Instructor string
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse, arg.Title, arg.Instructor)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Instructor,
		&i.CreatedAt,
	)
	return i, err
}

const getCourseByID = `-- name: GetCourseByID :one
SELECT id, title, instructor, created_at FROM courses
WHERE id = $1
`

func (q *Queries) GetCourseByID(ctx context.Context, id int32) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourseByID, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Instructor,
		&i.CreatedAt,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, title, instructor, created_at FROM courses
ORDER BY id
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Instructor,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
